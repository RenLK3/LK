<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lk.xxl.mapper.XxlJobLogMapper">

    <resultMap id="XxlJobLog" type="com.lk.xxl.domain.XxlJobLog">
        <result column="id" property="id"/>

        <result column="job_group" property="jobGroup"/>
        <result column="job_id" property="jobId"/>

        <result column="executor_address" property="executorAddress"/>
        <result column="executor_handler" property="executorHandler"/>
        <result column="executor_param" property="executorParam"/>
        <result column="executor_sharding_param" property="executorShardingParam"/>
        <result column="executor_fail_retry_count" property="executorFailRetryCount"/>

        <result column="trigger_time" property="triggerTime"/>
        <result column="trigger_code" property="triggerCode"/>
        <result column="trigger_msg" property="triggerMsg"/>

        <result column="handle_time" property="handleTime"/>
        <result column="handle_code" property="handleCode"/>
        <result column="handle_msg" property="handleMsg"/>

        <result column="alarm_status" property="alarmStatus"/>
    </resultMap>

    <sql id="Base_Column_List">
        t
        .
        id
        ,
		t.job_group,
		t.job_id,
		t.executor_address,
		t.executor_handler,
		t.executor_param,
		t.executor_sharding_param,
		t.executor_fail_retry_count,
		t.trigger_time,
		t.trigger_code,
		t.trigger_msg,
		t.handle_time,
		t.handle_code,
		t.handle_msg,
		t.alarm_status
    </sql>

    <select id="selectLogList" resultMap="XxlJobLog">
        SELECT
        <include refid="Base_Column_List"/>
        FROM xxl_job_log t
        ORDER BY t.trigger_time DESC
    </select>

    <select id="load" parameterType="java.lang.Long" resultMap="XxlJobLog">
        SELECT
        <include refid="Base_Column_List"/>
        FROM xxl_job_log t
        WHERE t.id = #{id}
    </select>


    <insert id="save" parameterType="com.lk.xxl.domain.XxlJobLog" useGeneratedKeys="true" keyProperty="id">
        <selectKey keyProperty="id" resultType="int" order="BEFORE">
            select SEQ_XXL_JOB_INFO.NEXTVAL from dual
        </selectKey>
        INSERT INTO xxl_job_log (
        id,
        job_group ,
        job_id ,
        trigger_time ,
        trigger_code ,
        handle_code
        ) VALUES (
        #{id},
        #{jobGroup},
        #{jobId},
        #{triggerTime},
        #{triggerCode},
        #{handleCode}
        )
        <!--<selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id">
            SELECT LAST_INSERT_ID()
        </selectKey>-->
    </insert>

    <update id="updateTriggerInfo">
        UPDATE xxl_job_log
        SET trigger_time              = #{triggerTime},
            trigger_code              = #{triggerCode},
            trigger_msg               = #{triggerMsg},
        <if test="executorAddress != null and executorAddress != ''">executor_address = #{executorAddress},</if>
            executor_handler          =#{executorHandler},
        <if test="executorParam != null and executorParam != ''">executor_param = #{executorParam},</if>
        <if test="executorShardingParam != null and executorShardingParam != ''">executor_sharding_param = #{executorShardingParam},</if>
            executor_fail_retry_count = #{executorFailRetryCount}
        WHERE id = #{id}
    </update>

    <update id="updateHandleInfo">
        UPDATE xxl_job_log
        SET handle_time = #{handleTime},
            handle_code = #{handleCode},
            handle_msg  = #{handleMsg}
        WHERE id = #{id}
    </update>

    <delete id="delete">
        delete
        from xxl_job_log
        WHERE job_id = #{jobId}
    </delete>

    <!--<select id="triggerCountByDay" resultType="java.util.Map" >
		SELECT
			DATE_FORMAT(trigger_time,'%Y-%m-%d') triggerDay,
			COUNT(handle_code) triggerDayCount,
			SUM(CASE WHEN (trigger_code in (0, 200) and handle_code = 0) then 1 else 0 end) as triggerDayCountRunning,
			SUM(CASE WHEN handle_code = 200 then 1 else 0 end) as triggerDayCountSuc
		FROM xxl_job_log
		WHERE trigger_time BETWEEN #{from} and #{to}
		GROUP BY triggerDay
		ORDER BY triggerDay
    </select>-->

    <select id="findLogReport" resultType="java.util.Map">
        SELECT COUNT(handle_code)                                                              triggerDayCount,
               SUM(CASE WHEN (trigger_code in (0, 200) and handle_code = 0) then 1 else 0 end) triggerDayCountRunning,
               SUM(CASE WHEN handle_code = 200 then 1 else 0 end)                              triggerDayCountSuc
        FROM xxl_job_log
        WHERE trigger_time BETWEEN #{from} and #{to}
    </select>

    <select id="findClearLogIds" resultType="long">
        select ID from (
        SELECT row_number() over(order by id asc) r,id FROM xxl_job_log
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="jobGroup gt 0">
                AND job_group = #{jobGroup}
            </if>
            <if test="jobId gt 0">
                AND job_id = #{jobId}
            </if>
            <if test="clearBeforeTime != null">
                AND trigger_time <![CDATA[ <= ]]> #{clearBeforeTime}
            </if>
            <if test="clearBeforeNum gt 0">
                AND id NOT in(
                SELECT id FROM(
                select * from (
                SELECT row_number() over(ORDER BY t.trigger_time desc) r,id FROM xxl_job_log  t
                <trim prefix="WHERE" prefixOverrides="AND | OR">
                    <if test="jobGroup gt 0">
                        AND t.job_group = #{jobGroup}
                    </if>
                    <if test="jobId gt 0">
                        AND t.job_id = #{jobId}
                    </if>
                </trim>
                ) where r between 0 and #{clearBeforeNum}
                ) t1
                )
            </if>
        </trim>
        )
        where r between 0 and #{pagesize}
    </select>

    <delete id="clearLog">
        delete from xxl_job_log
        WHERE id in
        <foreach collection="logIds" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>

    <select id="findFailJobLogIds" resultType="long">
        select *
        from (
                 SELECT row_number() over(ORDER BY id ASC) r,id
                 FROM xxl_job_log
                 WHERE not (
                         (trigger_code in (0, 200) and handle_code = 0)
                         OR
                         (handle_code = 200)
                     )
                   AND alarm_status = 0
             )
        where r between 0 and #{pagesize}
    </select>

    <update id="updateAlarmStatus">
        UPDATE xxl_job_log
        SET alarm_status = #{newAlarmStatus}
        WHERE id = #{logId}
          AND alarm_status = #{oldAlarmStatus}
    </update>

    <select id="findLostJobIds" resultType="long">
        SELECT t.id
        FROM xxl_job_log t
                 LEFT JOIN xxl_job_registry t2 ON t.executor_address = t2.registry_value
        WHERE t.trigger_code = 200
          AND t.handle_code = 0
          AND t.trigger_time <![CDATA[ <= ]]> #{losedTime}
          AND t2.id IS NULL
    </select>

    <delete id="deleteJobLogByIds" parameterType="String">
        delete from xxl_job_log where id in
        <foreach collection="array" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <!--
    SELECT t.id
    FROM xxl_job_log AS t
    WHERE t.trigger_code = 200
        and t.handle_code = 0
        and t.trigger_time <![CDATA[ <= ]]> #{losedTime}
        and t.executor_address not in (
            SELECT t2.registry_value
            FROM xxl_job_registry AS t2
        )
    -->

</mapper>